# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .text_chunk import TextChunk
from .tool_call import ToolCall
from .log_event import LogEvent
from .log_metric import LogMetric
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class AgentTranscript(UniversalBaseModel):
    role: str = pydantic.Field()
    """
    The role of the participant in the conversation. Roles are `user`, `assistant`, or `system`. `assistant` is the agent. `system` is used to indicate logs during the conversation such as `log_event` or `log_metric`.
    """

    text: typing.Optional[str] = pydantic.Field(default=None)
    """
    The text content of the transcript. This is the text that was spoken by the user or the agent.
    """

    text_chunks: typing.Optional[typing.List[TextChunk]] = pydantic.Field(default=None)
    """
    The chunks of text at a more granular level in the transcript with timestamps relative to the start of the call.
    """

    start_timestamp: float = pydantic.Field()
    """
    The start timestamp in seconds relative to the start of the call.
    """

    end_timestamp: float = pydantic.Field()
    """
    The end timestamp in seconds relative to the start of the call.
    """

    end_reason: typing.Optional[str] = pydantic.Field(default=None)
    """
    The reason for why the assistant turn ended. This could be `call_ended`, `interrupted`, or `tts_completed`.
    """

    tool_calls: typing.Optional[typing.List[ToolCall]] = pydantic.Field(default=None)
    """
    The tool calls made during the turn.
    """

    vad_buffer_ms: typing.Optional[int] = pydantic.Field(default=None)
    """
    The VAD buffer time in milliseconds.
    """

    tts_ttfb: typing.Optional[float] = pydantic.Field(default=None)
    """
    The time to first byte in seconds from the agent for text-to-speech.
    """

    log_event: typing.Optional[LogEvent] = pydantic.Field(default=None)
    """
    The log event from user code.
    """

    log_metric: typing.Optional[LogMetric] = pydantic.Field(default=None)
    """
    The log metric from user code.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
