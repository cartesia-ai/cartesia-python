# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing_extensions
from ...core.serialization import FieldMetadata
import typing
from .agent_transcript import AgentTranscript
from .agent_metric_result_status import AgentMetricResultStatus
import datetime as dt
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class MetricResult(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    The unique identifier for the metric result.
    """

    metric_id: typing_extensions.Annotated[str, FieldMetadata(alias="metricId")] = pydantic.Field()
    """
    The identifier of the metric being measured.
    """

    metric_name: typing_extensions.Annotated[str, FieldMetadata(alias="metricName")] = pydantic.Field()
    """
    The name of the metric being measured.
    """

    summary: str = pydantic.Field()
    """
    A summary of the transcript of the call.
    """

    transcript: typing.Optional[typing.List[AgentTranscript]] = pydantic.Field(default=None)
    """
    The transcript of the call.
    """

    agent_id: typing_extensions.Annotated[str, FieldMetadata(alias="agentId")] = pydantic.Field()
    """
    The identifier of the agent associated with the metric result.
    """

    call_id: typing_extensions.Annotated[str, FieldMetadata(alias="callId")] = pydantic.Field()
    """
    The identifier of the call associated with the metric result.
    """

    deployment_id: typing_extensions.Annotated[str, FieldMetadata(alias="deploymentId")] = pydantic.Field()
    """
    The identifier of the deployment associated with the metric result.
    """

    result: str = pydantic.Field()
    """
    The raw result of the metric in a string format.
    """

    json_result: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]], FieldMetadata(alias="jsonResult")
    ] = pydantic.Field(default=None)
    """
    The structured JSON result of the metric.
    """

    value: typing.Optional[typing.Optional[typing.Any]] = pydantic.Field(default=None)
    """
    The value of the metric result.
    """

    status: AgentMetricResultStatus = pydantic.Field()
    """
    The status of the metric result.
    """

    run_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="runId")] = pydantic.Field(
        default=None
    )
    """
    The identifier of the run associated with the metric result, if applicable.
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    The UTC timestamp when the metric result was created.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
