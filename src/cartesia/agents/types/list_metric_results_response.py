# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from .metric_result import MetricResult
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class ListMetricResultsResponse(UniversalBaseModel):
    data: typing.List[MetricResult] = pydantic.Field()
    """
    List of metric results.
    """

    has_more: bool = pydantic.Field()
    """
    Whether there are more metric results to fetch (using `starting_after=id`, where id is the ID of the last MetricResult in the current response).
    """

    next_page: typing.Optional[str] = pydantic.Field(default=None)
    """
    The cursor for the next page of results.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
