# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
import datetime as dt
from .agent_transcript import AgentTranscript
from .telephony_params import TelephonyParams
from .agent_call_status import AgentCallStatus
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class AgentCall(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    The unique identifier for the agent call.
    """

    agent_id: str = pydantic.Field()
    """
    The identifier of the agent associated with the call.
    """

    start_time: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The start time of the agent call.
    """

    end_time: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The end time of the agent call.
    """

    transcript: typing.Optional[typing.List[AgentTranscript]] = pydantic.Field(default=None)
    """
    The transcript of the agent call.
    """

    telephony_params: typing.Optional[TelephonyParams] = pydantic.Field(default=None)
    """
    The telephony parameters associated with the call when the call is made via phone.
    """

    summary: typing.Optional[str] = pydantic.Field(default=None)
    """
    A summary of the agent call. This is a brief summary of the call that is generated by Cartesia.
    """

    status: AgentCallStatus = pydantic.Field()
    """
    The status of the agent call.
    """

    error_message: typing.Optional[str] = pydantic.Field(default=None)
    """
    The error message, if any, associated with the call.
    """

    deployment_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The deployment identifier associated with the call.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
