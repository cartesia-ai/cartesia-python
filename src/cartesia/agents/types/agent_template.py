# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
import datetime as dt
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class AgentTemplate(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    The ID of the agent template.
    """

    name: str = pydantic.Field()
    """
    The name of the agent template.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    The description of the agent template.
    """

    repo_url: str = pydantic.Field()
    """
    The URL of the Git repository associated with the agent template.
    """

    root_dir: str = pydantic.Field()
    """
    The root directory of the agent template.
    """

    required_env_vars: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    The required environment variables for the agent template.
    """

    dependencies: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    The dependencies of the agent template.
    """

    owner_id: str = pydantic.Field()
    """
    The ID of the owner of the agent template.
    """

    created_at: dt.datetime = pydantic.Field()
    """
    The UTC timestamp when the agent template was created.
    """

    updated_at: dt.datetime = pydantic.Field()
    """
    The UTC timestamp when the agent template was last updated.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
