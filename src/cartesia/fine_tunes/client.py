# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from .types.paginated_fine_tunes import PaginatedFineTunes
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .types.fine_tune import FineTune
from ..core.jsonable_encoder import jsonable_encoder
from .types.paginated_voices import PaginatedVoices
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FineTunesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[str] = None,
        ending_before: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedFineTunes:
        """
        Paginated list of all fine-tunes for the authenticated user

        Parameters
        ----------
        limit : typing.Optional[int]
            The number of fine-tunes to return per page, ranging between 1 and 100.

        starting_after : typing.Optional[str]
            A cursor to use in pagination. `starting_after` is a fine-tune ID that defines your
            place in the list. For example, if you make a /fine-tunes request and receive 20
            objects, ending with `fine_tune_abc123`, your subsequent call can include
            `starting_after=fine_tune_abc123` to fetch the next page of the list.

        ending_before : typing.Optional[str]
            A cursor to use in pagination. `ending_before` is a fine-tune ID that defines your
            place in the list. For example, if you make a /fine-tunes request and receive 20
            objects, starting with `fine_tune_abc123`, your subsequent call can include
            `ending_before=fine_tune_abc123` to fetch the previous page of the list.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedFineTunes

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.fine_tunes.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "fine-tunes/",
            method="GET",
            params={
                "limit": limit,
                "starting_after": starting_after,
                "ending_before": ending_before,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaginatedFineTunes,
                    parse_obj_as(
                        type_=PaginatedFineTunes,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        name: str,
        description: str,
        language: str,
        model_id: str,
        dataset: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FineTune:
        """
        Create a new fine-tune

        Parameters
        ----------
        name : str
            Name for the new fine-tune

        description : str
            Description for the fine-tune

        language : str
            Language code for the fine-tune

        model_id : str
            Base model ID to fine-tune from

        dataset : str
            Dataset ID containing training files

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FineTune

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.fine_tunes.create(
            name="name",
            description="description",
            language="language",
            model_id="model_id",
            dataset="dataset",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "fine-tunes/",
            method="POST",
            json={
                "name": name,
                "description": description,
                "language": language,
                "model_id": model_id,
                "dataset": dataset,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    FineTune,
                    parse_obj_as(
                        type_=FineTune,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> FineTune:
        """
        Retrieve a specific fine-tune by ID

        Parameters
        ----------
        id : str
            ID of the fine-tune to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FineTune

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.fine_tunes.get(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"fine-tunes/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    FineTune,
                    parse_obj_as(
                        type_=FineTune,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a fine-tune

        Parameters
        ----------
        id : str
            ID of the fine-tune to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.fine_tunes.delete(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"fine-tunes/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_voices(
        self,
        id: str,
        *,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[str] = None,
        ending_before: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedVoices:
        """
        List all voices created from a fine-tune

        Parameters
        ----------
        id : str
            ID of the fine-tune to list voices from

        limit : typing.Optional[int]
            The number of voices to return per page, ranging between 1 and 100.

        starting_after : typing.Optional[str]
            A cursor to use in pagination. `starting_after` is a voice ID that defines your
            place in the list. For example, if you make a fine-tune voices request and receive 20
            objects, ending with `voice_abc123`, your subsequent call can include
            `starting_after=voice_abc123` to fetch the next page of the list.

        ending_before : typing.Optional[str]
            A cursor to use in pagination. `ending_before` is a voice ID that defines your
            place in the list. For example, if you make a fine-tune voices request and receive 20
            objects, starting with `voice_abc123`, your subsequent call can include
            `ending_before=voice_abc123` to fetch the previous page of the list.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedVoices

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.fine_tunes.list_voices(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"fine-tunes/{jsonable_encoder(id)}/voices",
            method="GET",
            params={
                "limit": limit,
                "starting_after": starting_after,
                "ending_before": ending_before,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaginatedVoices,
                    parse_obj_as(
                        type_=PaginatedVoices,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncFineTunesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[str] = None,
        ending_before: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedFineTunes:
        """
        Paginated list of all fine-tunes for the authenticated user

        Parameters
        ----------
        limit : typing.Optional[int]
            The number of fine-tunes to return per page, ranging between 1 and 100.

        starting_after : typing.Optional[str]
            A cursor to use in pagination. `starting_after` is a fine-tune ID that defines your
            place in the list. For example, if you make a /fine-tunes request and receive 20
            objects, ending with `fine_tune_abc123`, your subsequent call can include
            `starting_after=fine_tune_abc123` to fetch the next page of the list.

        ending_before : typing.Optional[str]
            A cursor to use in pagination. `ending_before` is a fine-tune ID that defines your
            place in the list. For example, if you make a /fine-tunes request and receive 20
            objects, starting with `fine_tune_abc123`, your subsequent call can include
            `ending_before=fine_tune_abc123` to fetch the previous page of the list.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedFineTunes

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.fine_tunes.list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "fine-tunes/",
            method="GET",
            params={
                "limit": limit,
                "starting_after": starting_after,
                "ending_before": ending_before,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaginatedFineTunes,
                    parse_obj_as(
                        type_=PaginatedFineTunes,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        name: str,
        description: str,
        language: str,
        model_id: str,
        dataset: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FineTune:
        """
        Create a new fine-tune

        Parameters
        ----------
        name : str
            Name for the new fine-tune

        description : str
            Description for the fine-tune

        language : str
            Language code for the fine-tune

        model_id : str
            Base model ID to fine-tune from

        dataset : str
            Dataset ID containing training files

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FineTune

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.fine_tunes.create(
                name="name",
                description="description",
                language="language",
                model_id="model_id",
                dataset="dataset",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "fine-tunes/",
            method="POST",
            json={
                "name": name,
                "description": description,
                "language": language,
                "model_id": model_id,
                "dataset": dataset,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    FineTune,
                    parse_obj_as(
                        type_=FineTune,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> FineTune:
        """
        Retrieve a specific fine-tune by ID

        Parameters
        ----------
        id : str
            ID of the fine-tune to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FineTune

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.fine_tunes.get(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"fine-tunes/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    FineTune,
                    parse_obj_as(
                        type_=FineTune,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a fine-tune

        Parameters
        ----------
        id : str
            ID of the fine-tune to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.fine_tunes.delete(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"fine-tunes/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_voices(
        self,
        id: str,
        *,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[str] = None,
        ending_before: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedVoices:
        """
        List all voices created from a fine-tune

        Parameters
        ----------
        id : str
            ID of the fine-tune to list voices from

        limit : typing.Optional[int]
            The number of voices to return per page, ranging between 1 and 100.

        starting_after : typing.Optional[str]
            A cursor to use in pagination. `starting_after` is a voice ID that defines your
            place in the list. For example, if you make a fine-tune voices request and receive 20
            objects, ending with `voice_abc123`, your subsequent call can include
            `starting_after=voice_abc123` to fetch the next page of the list.

        ending_before : typing.Optional[str]
            A cursor to use in pagination. `ending_before` is a voice ID that defines your
            place in the list. For example, if you make a fine-tune voices request and receive 20
            objects, starting with `voice_abc123`, your subsequent call can include
            `ending_before=voice_abc123` to fetch the previous page of the list.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedVoices

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.fine_tunes.list_voices(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"fine-tunes/{jsonable_encoder(id)}/voices",
            method="GET",
            params={
                "limit": limit,
                "starting_after": starting_after,
                "ending_before": ending_before,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaginatedVoices,
                    parse_obj_as(
                        type_=PaginatedVoices,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
