# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from .types.paginated_pronunciation_dicts import PaginatedPronunciationDicts
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .requests.pronunciation_dict_item import PronunciationDictItemParams
from .types.pronunciation_dict import PronunciationDict
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.jsonable_encoder import jsonable_encoder
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PronunciationDictsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[str] = None,
        ending_before: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedPronunciationDicts:
        """
        List all pronunciation dictionaries for the authenticated user

        Parameters
        ----------
        limit : typing.Optional[int]
            The number of dictionaries to return per page, ranging between 1 and 100.

        starting_after : typing.Optional[str]
            A cursor to use in pagination. `starting_after` is a dictionary ID that defines your
            place in the list. For example, if you make a request and receive 20 objects, ending
            with `dict_abc123`, your subsequent call can include `starting_after=dict_abc123`
            to fetch the next page of the list.

        ending_before : typing.Optional[str]
            A cursor to use in pagination. `ending_before` is a dictionary ID that defines your
            place in the list. For example, if you make a request and receive 20 objects, starting
            with `dict_abc123`, your subsequent call can include `ending_before=dict_abc123`
            to fetch the previous page of the list.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedPronunciationDicts

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.pronunciation_dicts.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "pronunciation-dicts/",
            method="GET",
            params={
                "limit": limit,
                "starting_after": starting_after,
                "ending_before": ending_before,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaginatedPronunciationDicts,
                    parse_obj_as(
                        type_=PaginatedPronunciationDicts,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        items: typing.Optional[typing.Sequence[PronunciationDictItemParams]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PronunciationDict:
        """
        Create a new pronunciation dictionary

        Parameters
        ----------
        name : str
            Name for the new pronunciation dictionary

        description : typing.Optional[str]
            Description for the new pronunciation dictionary

        items : typing.Optional[typing.Sequence[PronunciationDictItemParams]]
            Optional initial list of unique pronunciation mappings

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PronunciationDict

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.pronunciation_dicts.create(
            name="My Pronunciation Dictionary",
            description="My pronunciation dictionary - Cartesia",
            items=[{"text": "Cartesia", "pronunciation": "<<k|ɑː|ʈ|iː|z|i|ə>>"}],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "pronunciation-dicts/",
            method="POST",
            json={
                "name": name,
                "description": description,
                "items": convert_and_respect_annotation_metadata(
                    object_=items, annotation=typing.Sequence[PronunciationDictItemParams], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PronunciationDict,
                    parse_obj_as(
                        type_=PronunciationDict,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> PronunciationDict:
        """
        Retrieve a specific pronunciation dictionary by ID

        Parameters
        ----------
        id : str
            ID of the pronunciation dictionary to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PronunciationDict

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.pronunciation_dicts.get(
            id="pdict_abc123",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"pronunciation-dicts/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PronunciationDict,
                    parse_obj_as(
                        type_=PronunciationDict,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        items: typing.Optional[typing.Sequence[PronunciationDictItemParams]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PronunciationDict:
        """
        Update a pronunciation dictionary

        Parameters
        ----------
        id : str
            ID of the pronunciation dictionary to update

        name : typing.Optional[str]
            New name for the pronunciation dictionary

        description : typing.Optional[str]
            New description for the pronunciation dictionary

        items : typing.Optional[typing.Sequence[PronunciationDictItemParams]]
            Updated list of unique pronunciation mappings

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PronunciationDict

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.pronunciation_dicts.update(
            id="pdict_abc123",
            name="My Pronunciation Dictionary",
            description="My pronunciation dictionary - Cartesia - This is a production dictionary",
            items=[
                {"text": "Cartesia", "pronunciation": "<<k|ɑː|ʈ|iː|z|i|ə>>"},
                {"text": "cartesia", "pronunciation": "<<k|ɑː|ʈ|iː|z|i|ə>>"},
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"pronunciation-dicts/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "name": name,
                "description": description,
                "items": convert_and_respect_annotation_metadata(
                    object_=items, annotation=typing.Sequence[PronunciationDictItemParams], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PronunciationDict,
                    parse_obj_as(
                        type_=PronunciationDict,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a pronunciation dictionary

        Parameters
        ----------
        id : str
            ID of the pronunciation dictionary to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.pronunciation_dicts.delete(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"pronunciation-dicts/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def pin(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Pin a pronunciation dictionary for the authenticated user

        Parameters
        ----------
        id : str
            ID of the pronunciation dictionary to pin

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.pronunciation_dicts.pin(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"pronunciation-dicts/{jsonable_encoder(id)}/pin",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def unpin(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Unpin a pronunciation dictionary for the authenticated user

        Parameters
        ----------
        id : str
            ID of the pronunciation dictionary to unpin

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.pronunciation_dicts.unpin(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"pronunciation-dicts/{jsonable_encoder(id)}/unpin",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPronunciationDictsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[str] = None,
        ending_before: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedPronunciationDicts:
        """
        List all pronunciation dictionaries for the authenticated user

        Parameters
        ----------
        limit : typing.Optional[int]
            The number of dictionaries to return per page, ranging between 1 and 100.

        starting_after : typing.Optional[str]
            A cursor to use in pagination. `starting_after` is a dictionary ID that defines your
            place in the list. For example, if you make a request and receive 20 objects, ending
            with `dict_abc123`, your subsequent call can include `starting_after=dict_abc123`
            to fetch the next page of the list.

        ending_before : typing.Optional[str]
            A cursor to use in pagination. `ending_before` is a dictionary ID that defines your
            place in the list. For example, if you make a request and receive 20 objects, starting
            with `dict_abc123`, your subsequent call can include `ending_before=dict_abc123`
            to fetch the previous page of the list.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedPronunciationDicts

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.pronunciation_dicts.list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "pronunciation-dicts/",
            method="GET",
            params={
                "limit": limit,
                "starting_after": starting_after,
                "ending_before": ending_before,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaginatedPronunciationDicts,
                    parse_obj_as(
                        type_=PaginatedPronunciationDicts,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        items: typing.Optional[typing.Sequence[PronunciationDictItemParams]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PronunciationDict:
        """
        Create a new pronunciation dictionary

        Parameters
        ----------
        name : str
            Name for the new pronunciation dictionary

        description : typing.Optional[str]
            Description for the new pronunciation dictionary

        items : typing.Optional[typing.Sequence[PronunciationDictItemParams]]
            Optional initial list of unique pronunciation mappings

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PronunciationDict

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.pronunciation_dicts.create(
                name="My Pronunciation Dictionary",
                description="My pronunciation dictionary - Cartesia",
                items=[{"text": "Cartesia", "pronunciation": "<<k|ɑː|ʈ|iː|z|i|ə>>"}],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "pronunciation-dicts/",
            method="POST",
            json={
                "name": name,
                "description": description,
                "items": convert_and_respect_annotation_metadata(
                    object_=items, annotation=typing.Sequence[PronunciationDictItemParams], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PronunciationDict,
                    parse_obj_as(
                        type_=PronunciationDict,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> PronunciationDict:
        """
        Retrieve a specific pronunciation dictionary by ID

        Parameters
        ----------
        id : str
            ID of the pronunciation dictionary to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PronunciationDict

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.pronunciation_dicts.get(
                id="pdict_abc123",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"pronunciation-dicts/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PronunciationDict,
                    parse_obj_as(
                        type_=PronunciationDict,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        items: typing.Optional[typing.Sequence[PronunciationDictItemParams]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PronunciationDict:
        """
        Update a pronunciation dictionary

        Parameters
        ----------
        id : str
            ID of the pronunciation dictionary to update

        name : typing.Optional[str]
            New name for the pronunciation dictionary

        description : typing.Optional[str]
            New description for the pronunciation dictionary

        items : typing.Optional[typing.Sequence[PronunciationDictItemParams]]
            Updated list of unique pronunciation mappings

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PronunciationDict

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.pronunciation_dicts.update(
                id="pdict_abc123",
                name="My Pronunciation Dictionary",
                description="My pronunciation dictionary - Cartesia - This is a production dictionary",
                items=[
                    {"text": "Cartesia", "pronunciation": "<<k|ɑː|ʈ|iː|z|i|ə>>"},
                    {"text": "cartesia", "pronunciation": "<<k|ɑː|ʈ|iː|z|i|ə>>"},
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"pronunciation-dicts/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "name": name,
                "description": description,
                "items": convert_and_respect_annotation_metadata(
                    object_=items, annotation=typing.Sequence[PronunciationDictItemParams], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PronunciationDict,
                    parse_obj_as(
                        type_=PronunciationDict,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a pronunciation dictionary

        Parameters
        ----------
        id : str
            ID of the pronunciation dictionary to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.pronunciation_dicts.delete(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"pronunciation-dicts/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def pin(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Pin a pronunciation dictionary for the authenticated user

        Parameters
        ----------
        id : str
            ID of the pronunciation dictionary to pin

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.pronunciation_dicts.pin(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"pronunciation-dicts/{jsonable_encoder(id)}/pin",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def unpin(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Unpin a pronunciation dictionary for the authenticated user

        Parameters
        ----------
        id : str
            ID of the pronunciation dictionary to unpin

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.pronunciation_dicts.unpin(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"pronunciation-dicts/{jsonable_encoder(id)}/unpin",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
