# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class PronunciationDictItem(UniversalBaseModel):
    """
    A pronunciation dictionary item mapping text to a custom pronunciation.
    """

    text: str = pydantic.Field()
    """
    The original text to be replaced. All lowercase entries are case-insensitive and title case of the word will be handled automatically. For example, if your entry is "tomato", you do not need to make a new entry for "Tomato". However, entries with mixed case or non-Latin characters are case-sensitive, so if your entry is "LaTeX", it will not apply to "latex".
    """

    pronunciation: str = pydantic.Field()
    """
    A phonetic representation or text to be said in place of the original text. The pronunciation can be at most 100 characters.
    """

    alias: typing.Optional[str] = pydantic.Field(default=None)
    """
    A phonetic representation or text to be said in place of the original text. The alias can be at most 100 characters.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
