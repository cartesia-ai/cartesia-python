# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .pronunciation_dict_item import PronunciationDictItem
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class PronunciationDict(UniversalBaseModel):
    """
    A dictionary of unique text-to-pronunciation mappings
    """

    id: str = pydantic.Field()
    """
    Unique identifier for the pronunciation dictionary
    """

    name: str = pydantic.Field()
    """
    Name of the pronunciation dictionary
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Description of the pronunciation dictionary
    """

    owner_id: str = pydantic.Field()
    """
    ID of the user who owns this dictionary
    """

    pinned: bool = pydantic.Field()
    """
    Whether this dictionary is pinned for the user
    """

    items: typing.List[PronunciationDictItem] = pydantic.Field()
    """
    List of unique text-to-pronunciation mappings
    """

    created_at: str = pydantic.Field()
    """
    ISO 8601 timestamp of when the dictionary was created
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
