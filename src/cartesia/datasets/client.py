# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from .types.paginated_datasets import PaginatedDatasets
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .types.dataset import Dataset
from ..core.jsonable_encoder import jsonable_encoder
from .types.paginated_dataset_files import PaginatedDatasetFiles
from .. import core
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DatasetsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[str] = None,
        ending_before: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedDatasets:
        """
        Paginated list of datasets

        Parameters
        ----------
        limit : typing.Optional[int]
            The number of Datasets to return per page, ranging between 1 and 100.

        starting_after : typing.Optional[str]
            A cursor to use in pagination. `starting_after` is a Dataset ID that defines your
            place in the list. For example, if you make a /datasets request and receive 20
            objects, ending with `dataset_abc123`, your subsequent call can include
            `starting_after=dataset_abc123` to fetch the next page of the list.

        ending_before : typing.Optional[str]
            A cursor to use in pagination. `ending_before` is a Dataset ID that defines your
            place in the list. For example, if you make a /datasets request and receive 20
            objects, starting with `dataset_abc123`, your subsequent call can include
            `ending_before=dataset_abc123` to fetch the previous page of the list.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedDatasets

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.datasets.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "datasets/",
            method="GET",
            params={
                "limit": limit,
                "starting_after": starting_after,
                "ending_before": ending_before,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaginatedDatasets,
                    parse_obj_as(
                        type_=PaginatedDatasets,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self, *, name: str, description: str, request_options: typing.Optional[RequestOptions] = None
    ) -> Dataset:
        """
        Create a new dataset

        Parameters
        ----------
        name : str
            Name for the new dataset

        description : str
            Optional description for the dataset

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Dataset

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.datasets.create(
            name="name",
            description="description",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "datasets/",
            method="POST",
            json={
                "name": name,
                "description": description,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Dataset,
                    parse_obj_as(
                        type_=Dataset,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Dataset:
        """
        Retrieve a specific dataset by ID

        Parameters
        ----------
        id : str
            ID of the dataset to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Dataset

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.datasets.get(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Dataset,
                    parse_obj_as(
                        type_=Dataset,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self, id: str, *, name: str, description: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Update an existing dataset

        Parameters
        ----------
        id : str
            ID of the dataset to update

        name : str
            New name for the dataset

        description : str
            New description for the dataset

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.datasets.update(
            id="id",
            name="name",
            description="description",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "name": name,
                "description": description,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a dataset

        Parameters
        ----------
        id : str
            ID of the dataset to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.datasets.delete(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_files(
        self,
        id: str,
        *,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[str] = None,
        ending_before: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedDatasetFiles:
        """
        Paginated list of files in a dataset

        Parameters
        ----------
        id : str
            ID of the dataset to list files from

        limit : typing.Optional[int]
            The number of files to return per page, ranging between 1 and 100.

        starting_after : typing.Optional[str]
            A cursor to use in pagination. `starting_after` is a file ID that defines your
            place in the list. For example, if you make a dataset files request and receive 20
            objects, ending with `file_abc123`, your subsequent call can include
            `starting_after=file_abc123` to fetch the next page of the list.

        ending_before : typing.Optional[str]
            A cursor to use in pagination. `ending_before` is a file ID that defines your
            place in the list. For example, if you make a dataset files request and receive 20
            objects, starting with `file_abc123`, your subsequent call can include
            `ending_before=file_abc123` to fetch the previous page of the list.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedDatasetFiles

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.datasets.list_files(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/files",
            method="GET",
            params={
                "limit": limit,
                "starting_after": starting_after,
                "ending_before": ending_before,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaginatedDatasetFiles,
                    parse_obj_as(
                        type_=PaginatedDatasetFiles,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def upload_file(
        self, id: str, *, file: core.File, purpose: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Upload a new file to a dataset

        Parameters
        ----------
        id : str
            ID of the dataset to upload to

        file : core.File
            See core.File for more documentation

        purpose : str
            Purpose of the file (e.g., fine_tune)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/files",
            method="POST",
            data={
                "purpose": purpose,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_file(self, id: str, file_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Remove a file from a dataset

        Parameters
        ----------
        id : str
            ID of the dataset containing the file

        file_id : str
            ID of the file to remove

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from cartesia import Cartesia

        client = Cartesia(
            token="YOUR_TOKEN",
        )
        client.datasets.delete_file(
            id="id",
            file_id="fileID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/files/{jsonable_encoder(file_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDatasetsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[str] = None,
        ending_before: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedDatasets:
        """
        Paginated list of datasets

        Parameters
        ----------
        limit : typing.Optional[int]
            The number of Datasets to return per page, ranging between 1 and 100.

        starting_after : typing.Optional[str]
            A cursor to use in pagination. `starting_after` is a Dataset ID that defines your
            place in the list. For example, if you make a /datasets request and receive 20
            objects, ending with `dataset_abc123`, your subsequent call can include
            `starting_after=dataset_abc123` to fetch the next page of the list.

        ending_before : typing.Optional[str]
            A cursor to use in pagination. `ending_before` is a Dataset ID that defines your
            place in the list. For example, if you make a /datasets request and receive 20
            objects, starting with `dataset_abc123`, your subsequent call can include
            `ending_before=dataset_abc123` to fetch the previous page of the list.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedDatasets

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.datasets.list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "datasets/",
            method="GET",
            params={
                "limit": limit,
                "starting_after": starting_after,
                "ending_before": ending_before,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaginatedDatasets,
                    parse_obj_as(
                        type_=PaginatedDatasets,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self, *, name: str, description: str, request_options: typing.Optional[RequestOptions] = None
    ) -> Dataset:
        """
        Create a new dataset

        Parameters
        ----------
        name : str
            Name for the new dataset

        description : str
            Optional description for the dataset

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Dataset

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.datasets.create(
                name="name",
                description="description",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "datasets/",
            method="POST",
            json={
                "name": name,
                "description": description,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Dataset,
                    parse_obj_as(
                        type_=Dataset,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Dataset:
        """
        Retrieve a specific dataset by ID

        Parameters
        ----------
        id : str
            ID of the dataset to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Dataset

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.datasets.get(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Dataset,
                    parse_obj_as(
                        type_=Dataset,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self, id: str, *, name: str, description: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Update an existing dataset

        Parameters
        ----------
        id : str
            ID of the dataset to update

        name : str
            New name for the dataset

        description : str
            New description for the dataset

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.datasets.update(
                id="id",
                name="name",
                description="description",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "name": name,
                "description": description,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a dataset

        Parameters
        ----------
        id : str
            ID of the dataset to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.datasets.delete(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_files(
        self,
        id: str,
        *,
        limit: typing.Optional[int] = None,
        starting_after: typing.Optional[str] = None,
        ending_before: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedDatasetFiles:
        """
        Paginated list of files in a dataset

        Parameters
        ----------
        id : str
            ID of the dataset to list files from

        limit : typing.Optional[int]
            The number of files to return per page, ranging between 1 and 100.

        starting_after : typing.Optional[str]
            A cursor to use in pagination. `starting_after` is a file ID that defines your
            place in the list. For example, if you make a dataset files request and receive 20
            objects, ending with `file_abc123`, your subsequent call can include
            `starting_after=file_abc123` to fetch the next page of the list.

        ending_before : typing.Optional[str]
            A cursor to use in pagination. `ending_before` is a file ID that defines your
            place in the list. For example, if you make a dataset files request and receive 20
            objects, starting with `file_abc123`, your subsequent call can include
            `ending_before=file_abc123` to fetch the previous page of the list.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedDatasetFiles

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.datasets.list_files(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/files",
            method="GET",
            params={
                "limit": limit,
                "starting_after": starting_after,
                "ending_before": ending_before,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaginatedDatasetFiles,
                    parse_obj_as(
                        type_=PaginatedDatasetFiles,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def upload_file(
        self, id: str, *, file: core.File, purpose: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Upload a new file to a dataset

        Parameters
        ----------
        id : str
            ID of the dataset to upload to

        file : core.File
            See core.File for more documentation

        purpose : str
            Purpose of the file (e.g., fine_tune)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/files",
            method="POST",
            data={
                "purpose": purpose,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_file(
        self, id: str, file_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Remove a file from a dataset

        Parameters
        ----------
        id : str
            ID of the dataset containing the file

        file_id : str
            ID of the file to remove

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from cartesia import AsyncCartesia

        client = AsyncCartesia(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.datasets.delete_file(
                id="id",
                file_id="fileID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/files/{jsonable_encoder(file_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
